Top CLJS tickets by weighted vote

Date: January 15, 2015
 
Open CLJS tickets with at least one vote, sorted in descending order of
their "weighted vote".  At the end of the CLJ and CLJS lists are
tickets with no votes, but they have been at least Triaged.  For the
CLJ project, Triaged means that at least one Clojure screener thinks
the ticket describes a real issue.  At the end of other project ticket
lists are all open tickets, whether they have votes or not.

Suppose someone has currently voted on N open tickets.  Then their
vote counts as 1/N for each of those tickets.  Thus voting on all
tickets has the same relative effect on their ranking as voting on no
tickets.  You must be selective to change the rankings.

Each person gets 1 weighted vote to divide up as they wish for each
project, e.g. 1 for CLJ, 1 for CLJS, 1 for MATCH, etc.

Note: Ticket wranglers sometimes look at unweighted vote counts on
tickets, too, when deciding which to act upon, so feel free to vote on
many tickets if you care about them.

Each ticket is listed with:

<weighted vote>  <vote count>  <State>   [<project>-<n>] <summary line>
             voter #1 (weight that voter #1 contributes)
             voter #2 (weight that voter #2 contributes)
             ...

where State is one of the states in the JIRA flow diagram at

    http://dev.clojure.org/display/community/JIRA+workflow

Note that a state of "Backlog" is shown below if the next release is
N, and the ticket is marked for fix in release N+1 (e.g. the next
release is 1.7, but the ticket is marked for fix in release 1.8).

========================================
Defect

    4.83   6 Open         [CLJS-769] clojure.core/unsigned-bit-shift-right not excluded in cljs.core
    2.00   2 Open         [CLJS-785] :refer-macros in conjunction with :refer not working
    2.00   2 Open         [CLJS-865] js-dependency-index won't work when running from an uberjar
    1.00   1 Open         [CLJS-109] Compiler errors/warnings should be displayed when cljs namespace 'package' names start with an unacceptable javascript symbol.
    1.00   1 Open         [CLJS-851] simplify :none script inclusion if :main supplied
    1.00   1 Open         [CLJS-957] Parallel compilation
    0.50   1 Open         [CLJS-871] .-default property access returns nil
    0.50   1 Open         [CLJS-890] Incorrect behaviour of (str obj) when obj has valueOf method
    0.50   1 Open         [CLJS-965] Make :foreign-libs more useful
    0.33   1 Open         [CLJS-677] cljs.reader doesn't support keywords starting with a digit

========================================
Enhancement

   11.50  12 Vetted       [CLJS-27] Conditional compilation (or reading)
    4.50   5 Open         [CLJS-927] :recompile-dependents build option
    3.50   4 Open         [CLJS-37] A way to create js objects and arrays from cljs maps and vectors, without copying if possible.
    3.00   3 Open         [CLJS-463] Google Closure Class interop form (genclass)
    1.50   2 Open         [CLJS-112] clojure.data.json -- Read and write JSON strings to/from clojure data structures
    1.00   1 Open         [CLJS-145] Cannot create more than one browser evaluation environment
    1.00   1 Open         [CLJS-335] user defined tagged literals in CLJS
    1.00   1 Open         [CLJS-555] CLONE - Implement ratios
    1.00   1 Open         [CLJS-948] Simplify macro usage
    0.33   1 Open         [CLJS-733] Implement printing & equality for the JSValue type

========================================
Task

    1.00   1 Open         [CLJS-710] port clojure.pprint
