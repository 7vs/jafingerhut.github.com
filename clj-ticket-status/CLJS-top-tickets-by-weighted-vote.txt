Top CLJS tickets by weighted vote

Date: July 7, 2016
 
Open CLJS tickets with at least one vote, sorted in descending order of
their "weighted vote".  At the end of the CLJ and CLJS lists are
tickets with no votes, but they have been at least Triaged.  For the
CLJ project, Triaged means that at least one Clojure screener thinks
the ticket describes a real issue.  At the end of other project ticket
lists are all open tickets, whether they have votes or not.

Suppose someone has currently voted on N open tickets.  Then their
vote counts as 1/N for each of those tickets.  Thus voting on all
tickets has the same relative effect on their ranking as voting on no
tickets.  You must be selective to change the rankings.

Each person gets 1 weighted vote to divide up as they wish for each
project, e.g. 1 for CLJ, 1 for CLJS, 1 for MATCH, etc.

Note: Ticket wranglers sometimes look at unweighted vote counts on
tickets, too, when deciding which to act upon, so feel free to vote on
many tickets if you care about them.

Each ticket is listed with:

<weighted vote>  <vote count>  <State>   [<project>-<n>] <summary line>
             voter #1 (weight that voter #1 contributes)
             voter #2 (weight that voter #2 contributes)
             ...

where State is one of the states in the JIRA flow diagram at

    http://dev.clojure.org/display/community/JIRA+workflow

Note that a state of "Backlog" is shown below if the next release is
N, and the ticket is marked for fix in release N+1 (e.g. the next
release is 1.7, but the ticket is marked for fix in release 1.8).

========================================
Defect

    2.50   3 Open         [CLJS-677] cljs.reader doesn't support keywords starting with a digit
             Francis Avila (1)
             Mike Longworth (1)
             Peter Taoussanis (1/2)
    2.00   2 Open         [CLJS-884] with-redefs don't restores previous values when used inside go block
             Kris Jenkins (1)
             Tolga Paksoy (1)
    1.50   2 Bad: Unkn Fi [CLJS-968] Metadata on function literal inside of a let produces invalid Javascript
             David Nolen (1)
             Herwig Hochleitner (1/2)
    1.00   2 Bad: Unkn Fi [CLJS-485] clojure.string/replace ignores regex flags
             Dave Aitken (1/2)
             Jake McCrary (1/2)
    1.00   2 Bad: Unkn Fi [CLJS-794] RegExp flags are being dropped by `string/replace`
             Dave Aitken (1/2)
             Jake McCrary (1/2)
    1.00   1 Bad: Unkn Fi [CLJS-871] .-default property access returns nil
             Timothy Pratley (1)
    1.00   1 Open         [CLJS-890] Incorrect behaviour of (str obj) when obj has valueOf method
             Kevin Neaton (1)
    0.75   2 Open         [CLJS-1572] REPL doesn't give error for expressions with too many right parentheses.
             Herwig Hochleitner (1/2)
             Yehonathan Sharvit (1/4)
    0.50   1 Bad: Unkn Fi [CLJS-1159] compiled files with warnings that otherwise don't need recompilation will not emit warnings on the next compile
             Thomas Heller (1/2)
    0.33   1 Open         [CLJS-1607] Advanced compilation bug with `specify!` in JS prototypes
             Andrey Antukh (1/3)
    0.25   1 Bad: Unkn Fi [CLJS-719] this-as behaves incorrectly in "scoping function"
             J.&nbsp;S.&nbsp;Choi (1/4)
    0.25   1 Open         [CLJS-1593] Self-host: Munged minus macro
             Yehonathan Sharvit (1/4)
    0.25   1 Open         [CLJS-1657] Self-host: Implicit macro loading with alias
             Yehonathan Sharvit (1/4)
    0.00   0 Bad: Unkn Fi [CLJS-349] cljs.compiler: No defmethod for emit-constant clojure.lang.LazySeq
    0.00   0 Bad: Unkn Fi [CLJS-375] loop doesn't seem to preserve tag information as evidenced by extra cljs.core.truth_ calls
    0.00   0 Bad: Unkn Fi [CLJS-434] ClojureScript compiler prepends "self__" to defmulti forms when metadata in form of ^:field.
    0.00   0 Bad: Unkn Fi [CLJS-712] resolve-var for symbol with dot still wrong
    0.00   0 Bad: Unkn Fi [CLJS-868] no arity warnings on recursive calls
    0.00   0 Bad: Unkn Fi [CLJS-1070] top-level boolean inference does not work
    0.00   0 Bad: Unkn Fi [CLJS-1133] REPL require results in warnings to be emitted twice
    0.00   0 Bad: Unkn Fi [CLJS-1136] Initial require fails to fully load added symbols
    0.00   0 Bad: Unkn Fi [CLJS-1139] Repeated applications of `ns` form at the REPL are not additive
    0.00   0 Bad: Unkn Fi [CLJS-1222] Sequence of a stateful transducer is producing the wrong answer
    0.00   0 Bad: Unkn Fi [CLJS-1237] ns-unmap doesn't work on refers from cljs.core
    0.00   0 Bad: Unkn Fi [CLJS-1271] Missing warning when assigning namespaces via def
    0.00   0 Bad: Unkn Fi [CLJS-1286] REPL environment should be able to provide advice if source mapping fails
    0.00   0 Bad: Unkn Fi [CLJS-1297] defrecord does not emit IKVReduce protocol
    0.00   0 Bad: Unkn Fi [CLJS-1300] REPLs do no write out updated deps.js when compiling files
    0.00   0 Bad: Unkn Fi [CLJS-1315] Warning on Google Closure enum property access with /
    0.00   0 Bad: Unkn Fi [CLJS-1453] cljs.compiler/load-libs does not preserve user expressed require order
    0.00   0 Bad: Unkn Fi [CLJS-1485] Error when requiring `goog` namespace in a ns declaration 
    0.00   0 Bad: Unkn Fi [CLJS-1497] `find` on an associative collection does not return collection key
    0.00   0 Bad: Unkn Fi [CLJS-1544] cljs.test REPL reload support
    0.00   0 Bad: Unkn Fi [CLJS-1641] Multi-arity defn copies arguments unnecessarily for all cases
    0.00   0 Bad: Unkn Fi [CLJS-1666] Flag to optionally disable transit analysis cache encoding

========================================
Enhancement

    4.00   4 Bad: Unkn Fi [CLJS-1461] Convert analyzer to conform to tools.analyzer's spec
             James Henderson (1)
             Michael Griffiths (1)
             Nicola Mometto (1)
             Nicolas HA (1)
    3.00   3 Bad: Unkn Fi [CLJS-1074] Externs inference
             Leon Grapenthin (1)
             Vlad Bokov (1)
             shulang (1)
    2.00   2 Bad: Unkn Fi [CLJS-1350] Compiler support for browser REPL
             Antonin Hildebrand (1)
             Brandon Bloom (1)
    1.33   2 Bad: Unkn Fi [CLJS-1238] Setting *main-cli-fn* when using :target :nodejs shouldn't be manditory
             Rohit Aggarwal (1)
             Andrey Antukh (1/3)
    1.33   2 Open         [CLJS-555] CLONE - Implement ratios
             Marcus H (1)
             Mike Fikes (1/3)
    1.33   2 Open         [CLJS-1241] Add cljs.core/boolean? predicate
             Bridget Hillyer (1)
             Mike Fikes (1/3)
    1.00   1 Bad: Unkn Fi [CLJS-1047] externs checking for js/foo
             Bozhidar Batsov (1)
    1.00   1 Open         [CLJS-1009] Allow deps.cljs to declare a foreign lib as remote
             Ruslan Prokopchuk (1)
    1.00   1 Open         [CLJS-1153] Typed Array backed PersistentVector based on clojure.core/Vec
             Patrick Killean (1)
    1.00   1 Open         [CLJS-1428] Add a cljs.core/*command-line-args* var
             Matthew Nespor (1)
    0.50   1 Open         [CLJS-1346] Support require outside of ns 
             Peter Taoussanis (1/2)
    0.50   1 Open         [CLJS-1508] Extend ns form to support :rename option
             Thomas Heller (1/2)
    0.33   1 Open         [CLJS-1076] :nashorn target
             Andrey Antukh (1/3)
    0.25   1 Bad: Unkn Fi [CLJS-1194] data_readers.cljc
             J.&nbsp;S.&nbsp;Choi (1/4)
    0.25   1 Bad: Unkn Fi [CLJS-1328] Support defrecord reader tags
             J.&nbsp;S.&nbsp;Choi (1/4)
    0.25   1 Open         [CLJS-324] cljs.core/format
             Yehonathan Sharvit (1/4)
    0.25   1 Open         [CLJS-1410] Support source maps in deps.cljs
             J.&nbsp;S.&nbsp;Choi (1/4)
    0.00   0 Bad: Unkn Fi [CLJS-773] Use unchecked-*-int functions for real 32-bit math
    0.00   0 Bad: Unkn Fi [CLJS-994] print a warning when :externs file paths can't be found.
    0.00   0 Bad: Unkn Fi [CLJS-1125] Simple corrupted compiled file detection
    0.00   0 Bad: Unkn Fi [CLJS-1127] validate compiled file written to disk
    0.00   0 Bad: Unkn Fi [CLJS-1141] memoization of js-dependency-index and get-upstream-deps needs knobs
    0.00   0 Bad: Unkn Fi [CLJS-1147] reconnect logic for browser REPLs
    0.00   0 Bad: Unkn Fi [CLJS-1174] Simple warning if a namespace with dashes not found but a file path with dashes exists
    0.00   0 Bad: Unkn Fi [CLJS-1195] generic reusable command line argument parsing for REPLs
    0.00   0 Bad: Unkn Fi [CLJS-1207] Emit a warning if multiple resources found for a ClojureScript namespace
    0.00   0 Bad: Unkn Fi [CLJS-1277] relax requirement that files must declare a namespace, default to cljs.user
    0.00   0 Bad: Unkn Fi [CLJS-1373] Generalize CLJS-1324, check invokes of all IFn implementors
    0.00   0 Bad: Unkn Fi [CLJS-1402] Source Mapping Closure Error Logger
    0.00   0 Bad: Unkn Fi [CLJS-1412] Add JSDoc type information to individual IFn methods
    0.00   0 Bad: Unkn Fi [CLJS-1415] Handling JSDoc param name [x] optional syntax
    0.00   0 Bad: Unkn Fi [CLJS-1419] enhance numeric inference, if + number? test on local var should tag local var in the successful branch
    0.00   0 Bad: Unkn Fi [CLJS-1443] ES6 Module Processing at individual :foreign-lib spec
    0.00   0 Bad: Unkn Fi [CLJS-1700] Support clojure.* aliasing when not in vector

========================================
Task

    0.33   1 Open         [CLJS-901] Protocolize compiler access to the file system
             Mike Fikes (1/3)
    0.00   0 Bad: Unkn Fi [CLJS-1128] Describe internationalization strategies via Google Closure on the wiki
    0.00   0 Bad: Unkn Fi [CLJS-1129] :modules tutorial for wiki
    0.00   0 Bad: Unkn Fi [CLJS-1134] Lift protocols from cljs.closure into cljs.protocols ns
    0.00   0 Bad: Unkn Fi [CLJS-1446] autodoc + gh-pages for cljs.*.api namespaces
    0.00   0 Bad: Unkn Fi [CLJS-1447] IFn implementors have a broken call implementation, all args after 20th argument should be collected into a seq
    0.00   0 Bad: Unkn Fi [CLJS-1501] Add :parallel-build support to REPLs
