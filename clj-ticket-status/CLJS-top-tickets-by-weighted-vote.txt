Top CLJS tickets by weighted vote

Date: June 22, 2017
 
Open CLJS tickets with at least one vote, sorted in descending order of
their "weighted vote".  At the end of the CLJ and CLJS lists are
tickets with no votes, but they have been at least Triaged.  For the
CLJ project, Triaged means that at least one Clojure screener thinks
the ticket describes a real issue.  At the end of other project ticket
lists are all open tickets, whether they have votes or not.

Suppose someone has currently voted on N open tickets.  Then their
vote counts as (1+log(N,2))/N for each of those tickets, where
log(N,2) is the base 2 logarithm of N (formerly it was 1/N).  This new
formula gives those who vote on many tickets more 'points' to divide
up (suggested by Alex Miller).  Still, it helps to be selective to
change the rankings.

This calculation is done independently for each project, e.g. for CLJ,
for CLJS, for MATCH, etc.

Note: Ticket wranglers sometimes look at unweighted vote counts on
tickets, too, when deciding which to act upon, so feel free to vote on
many tickets if you care about them.

Each ticket is listed with:

<weighted vote>  <vote count>  <State>   [<project>-<n>] <summary line>
             voter #1 (weight that voter #1 contributes)
             voter #2 (weight that voter #2 contributes)
             ...

where State is one of the states in the JIRA flow diagram at

    http://dev.clojure.org/display/community/JIRA+workflow

Note that a state of "Backlog" is shown below if the next release is
N, and the ticket is marked for fix in release N+1 (e.g. the next
release is 1.7, but the ticket is marked for fix in release 1.8).

========================================
Defect

    4.00   4 Open         [CLJS-677] cljs.reader doesn't support keywords starting with a digit
             Damon Kropf-Untucht (1.00)
             Francis Avila (1.00)
             Mike Longworth (1.00)
             Peter Taoussanis (1.00)
    4.00   4 Open         [CLJS-1706] cljs.reader support for namespaced map literal
             Kevin Lynagh (1.00)
             Nuttanart Pornprasitsakul (1.00)
             Tim Gilbert (1.00)
             Justin Glenn Smith (1.00)
    2.00   2 Bad: Unkn Fi [CLJS-968] Metadata on function literal inside of a let produces invalid Javascript
             David Nolen (1.00)
             Herwig Hochleitner (1.00)
    2.00   2 Bad: Unkn Fi [CLJS-2059] Printing a namespaced qualified map and reading it back to ClojureScript fails
             Dmitr Sotnikov (1.00)
             Justin Glenn Smith (1.00)
    1.86   2 Open         [CLJS-1806] build api fails to generate inline code for :target :nodejs
             Dusan Maliarik (1.00)
             Patrick Killean (0.86)
    1.66   2 Open         [CLJS-1677] Requiring [goog] breaks an :advanced build, but the compiler exits successfully
             Oliver George (1.00)
             Yehonathan Sharvit (0.66)
    1.00   1 Bad: Unkn Fi [CLJS-871] .-default property access returns nil
             Timothy Pratley (1.00)
    1.00   1 Open         [CLJS-890] Incorrect behaviour of (str obj) when obj has valueOf method
             Kevin Neaton (1.00)
    1.00   1 Open         [CLJS-1864] timestamped source maps broken with Node
             Alexey Naumov (1.00)
    1.00   1 Open         [CLJS-1889] A lone ampersand `&` can be used to name a var, but throws when invoked. `(&)`
             Viktor Magyari (1.00)
    1.00   1 Open         [CLJS-1899] Local bindings conflict with global JS namespace
             Martin Clausen (1.00)
    1.00   1 Open         [CLJS-2002] Don't throw when no *print-fn* is set
             Pedro Girardi (1.00)
    0.86   1 Bad: Unkn Fi [CLJS-719] this-as behaves incorrectly in "scoping function"
             J.&nbsp;S.&nbsp;Choi (0.86)
    0.86   1 Bad: Unkn Fi [CLJS-868] no arity warnings on recursive calls
             A. R (0.86)
    0.86   1 Bad: Unkn Fi [CLJS-1297] defrecord does not emit IKVReduce protocol
             A. R (0.86)
    0.66   1 Bad: Unkn Fi [CLJS-1159] compiled files with warnings that otherwise don't need recompilation will not emit warnings on the next compile
             Thomas Heller (0.66)
    0.66   1 Open         [CLJS-1593] Self-host: Munged minus macro
             Yehonathan Sharvit (0.66)
    0.00   0 Bad: Unkn Fi [CLJS-349] cljs.compiler: No defmethod for emit-constant clojure.lang.LazySeq
    0.00   0 Bad: Unkn Fi [CLJS-375] loop doesn't seem to preserve tag information as evidenced by extra cljs.core.truth_ calls
    0.00   0 Bad: Unkn Fi [CLJS-434] ClojureScript compiler prepends "self__" to defmulti forms when metadata in form of ^:field.
    0.00   0 Bad: Unkn Fi [CLJS-712] resolve-var for symbol with dot still wrong
    0.00   0 Bad: Unkn Fi [CLJS-1070] top-level boolean inference does not work
    0.00   0 Bad: Unkn Fi [CLJS-1133] REPL require results in warnings to be emitted twice
    0.00   0 Bad: Unkn Fi [CLJS-1139] Repeated applications of `ns` form at the REPL are not additive
    0.00   0 Bad: Unkn Fi [CLJS-1222] Sequence of a stateful transducer is producing the wrong answer
    0.00   0 Bad: Unkn Fi [CLJS-1237] ns-unmap doesn't work on refers from cljs.core
    0.00   0 Bad: Unkn Fi [CLJS-1271] Missing warning when assigning namespaces via def
    0.00   0 Bad: Unkn Fi [CLJS-1286] REPL environment should be able to provide advice if source mapping fails
    0.00   0 Bad: Unkn Fi [CLJS-1300] REPLs do no write out updated deps.js when compiling files
    0.00   0 Bad: Unkn Fi [CLJS-1315] Warning on Google Closure enum property access with /
    0.00   0 Bad: Unkn Fi [CLJS-1485] Error when requiring `goog` namespace in a ns declaration 
    0.00   0 Bad: Unkn Fi [CLJS-1544] cljs.test REPL reload support
    0.00   0 Bad: Unkn Fi [CLJS-1764] Double warning for undeclared Var
    0.00   0 Bad: Unkn Fi [CLJS-1896] Externs file validation
    0.00   0 Bad: Unkn Fi [CLJS-1989] s/fdef expansion side effect fails when load cached source
    0.00   0 Bad: Unkn Fi [CLJS-2054] Private core names still result in "already declared" warnings
    0.00   0 Bad: Unkn Fi [CLJS-2109] incorrect syntax-quote symbol resolution (resolve-symbol 'clojure.core) -> 'clojure/core
    0.00   0 Bad: Unkn Fi [CLJS-2110] Regression with moving to test.check 0.10.0-alpha1
    0.00   0 Bad: Unkn Fi [CLJS-2113] nth function produces different results from clojure when using a negative index on a sequence

========================================
Enhancement

    5.66   6 Bad: Unkn Fi [CLJS-1461] Convert analyzer to conform to tools.analyzer's spec
             James Henderson (1.00)
             Michael Griffiths (1.00)
             Nicola Mometto (1.00)
             Nicolas HA (1.00)
             Tienson Qin (1.00)
             Thomas Heller (0.66)
    2.66   3 Open         [CLJS-1871] A declare with :arglists should generate static function calls
             Rohit Aggarwal (1.00)
             Nikita Prokopov (1.00)
             Thomas Heller (0.66)
    2.00   2 Open         [CLJS-555] CLONE - Implement ratios
             Marcus H (1.00)
             Mike Fikes (1.00)
    2.00   2 Open         [CLJS-1009] Allow deps.cljs to declare a foreign lib as remote
             Nathan Dao (1.00)
             Ruslan Prokopchuk (1.00)
    2.00   2 Open         [CLJS-1902] Add support for compiler option :inline-source-maps
             Andrea Richiardi (1.00)
             Dusan Maliarik (1.00)
    1.86   2 Open         [CLJS-1410] Support source maps in deps.cljs
             Daniel Compton (1.00)
             J.&nbsp;S.&nbsp;Choi (0.86)
    1.86   2 Open         [CLJS-1908] Improve error messages by using pr-str instead of str when printing objects
             Stuart Mitchell (1.00)
             A. R (0.86)
    1.66   2 Open         [CLJS-1628] Make instances of js/Symbol printable
             Nikita Prokopov (1.00)
             Yehonathan Sharvit (0.66)
    1.00   1 Bad: Match > [CLJS-1047] externs checking for js/foo
             Bozhidar Batsov (1.00)
    1.00   1 Open         [CLJS-1076] :nashorn target
             Andrey Antukh (1.00)
    1.00   1 Open         [CLJS-1428] Add a cljs.core/*command-line-args* var
             Matthew Nespor (1.00)
    1.00   1 Open         [CLJS-1631] The str function should handle JavaScript symbols
             Egg Syntax (1.00)
    1.00   1 Open         [CLJS-1755] Support sourcesContent in source maps
             Miloslav Nenad√°l (1.00)
    1.00   1 Open         [CLJS-2011] :modules should should not move namespaces unconditionally into the base module
             Dieter Komendera (1.00)
    0.86   1 Bad: Unkn Fi [CLJS-1328] Support defrecord reader tags
             J.&nbsp;S.&nbsp;Choi (0.86)
    0.86   1 Open         [CLJS-1153] Typed Array backed PersistentVector based on clojure.core/Vec
             Patrick Killean (0.86)
    0.66   1 Bad: Unkn Fi [CLJS-2077] :module-loader to generate module loader for user
             Thomas Heller (0.66)
    0.66   1 Open         [CLJS-1601] Optimize cljs.core dump 
             Yehonathan Sharvit (0.66)
    0.66   1 Open         [CLJS-1997] Outward function type hint propagation
             Thomas Heller (0.66)
    0.00   0 Bad: Unkn Fi [CLJS-773] Use unchecked-*-int functions for real 32-bit math
    0.00   0 Bad: Unkn Fi [CLJS-994] print a warning when :externs file paths can't be found.
    0.00   0 Bad: Unkn Fi [CLJS-1125] Simple corrupted compiled file detection
    0.00   0 Bad: Unkn Fi [CLJS-1127] validate compiled file written to disk
    0.00   0 Bad: Unkn Fi [CLJS-1141] memoization of js-dependency-index and get-upstream-deps needs knobs
    0.00   0 Bad: Unkn Fi [CLJS-1147] reconnect logic for browser REPLs
    0.00   0 Bad: Unkn Fi [CLJS-1174] Simple warning if a namespace with dashes not found but a file path with dashes exists
    0.00   0 Bad: Unkn Fi [CLJS-1195] generic reusable command line argument parsing for REPLs
    0.00   0 Bad: Unkn Fi [CLJS-1207] Emit a warning if multiple resources found for a ClojureScript namespace
    0.00   0 Bad: Unkn Fi [CLJS-1373] Generalize CLJS-1324, check invokes of all IFn implementors
    0.00   0 Bad: Unkn Fi [CLJS-1402] Source Mapping Closure Error Logger
    0.00   0 Bad: Unkn Fi [CLJS-1412] Add JSDoc type information to individual IFn methods
    0.00   0 Bad: Unkn Fi [CLJS-1415] Handling JSDoc param name [x] optional syntax
    0.00   0 Bad: Unkn Fi [CLJS-1419] enhance numeric inference, if + number? test on local var should tag local var in the successful branch
    0.00   0 Bad: Unkn Fi [CLJS-1800] Defer to tools.reader for cljs.reader functionality
    0.00   0 Bad: Unkn Fi [CLJS-1822] Use `:file-min` when processing JS modules with advanced optimizations
    0.00   0 Bad: Unkn Fi [CLJS-2061] Support ns :require for JS libs, allow strings along with symbols
    0.00   0 Bad: Unkn Fi [CLJS-2095] Nashorn runner

========================================
Task

    3.53   4 Open         [CLJS-901] Protocolize compiler access to the file system
             Dieter Komendera (1.00)
             Mike Fikes (1.00)
             Patrick Killean (0.86)
             Yehonathan Sharvit (0.66)
    0.00   0 Bad: Unkn Fi [CLJS-1134] Lift protocols from cljs.closure into cljs.protocols ns
    0.00   0 Bad: Unkn Fi [CLJS-1446] autodoc + gh-pages for cljs.*.api namespaces
    0.00   0 Bad: Unkn Fi [CLJS-1447] IFn implementors have a broken call implementation, all args after 20th argument should be collected into a seq
    0.00   0 Bad: Unkn Fi [CLJS-1501] Add :parallel-build support to REPLs
